[unix_http_server]
file=/tmp/supervisor.sock   ; path to your socket file

[supervisord]
logfile=/var/log/supervisor/supervisord.log ; supervisord log file
logfile_maxbytes=50MB       ; maximum size of logfile before rotation
logfile_backups=10          ; number of backed up logfiles
loglevel=info               ; info, debug, warn, trace
pidfile=/var/run/supervisord.pid ; pidfile location
nodaemon=false              ; run supervisord as a daemon
minfds=1024                 ; number of startup file descriptors
minprocs=200                ; number of process descriptors
user=root                   ; default user
childlogdir=/var/log/supervisor/            ; where child log files will live


[program:daphne]
; Set full path to celery program if using virtualenv
command=/anaconda3.5/envs/nsdata/bin/daphne nsdata.serverconfig.local.asgi:channel_layer -u /home/scott/repos/code/nsdata/nsdata.sock

directory=/home/scott/repos/code/nsdata
numprocs=1
stdout_logfile=/var/log/daphne/daphne.log
stderr_logfile=/var/log/daphne/daphne.log
autostart=true
autorestart=true
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 6

killasgroup=true

priority=998


[program:daphneHttpWorker1]
; Set full path to celery program if using virtualenv
command=/anaconda3.5/envs/nsdata/bin/python manage.py runworker

directory=/home/scott/repos/code/nsdata
numprocs=1
stdout_logfile=/var/log/daphne/daphneHttpWorker1.log
stderr_logfile=/var/log/daphne/daphneHttpWorker1.log
autostart=true
autorestart=true
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 6

killasgroup=true

priority=998


[program:daphneHttpWorker2]
; Set full path to celery program if using virtualenv
command=/anaconda3.5/envs/nsdata/bin/python manage.py runworker --only-channels=http.*

directory=/home/scott/repos/code/nsdata
numprocs=1
stdout_logfile=/var/log/daphne/daphneHttpWorker2.log
stderr_logfile=/var/log/daphne/daphneHttpWorker2.log
autostart=true
autorestart=true
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 6

killasgroup=true

priority=998


[program:daphneHttpWorker3]
; Set full path to celery program if using virtualenv
command=/anaconda3.5/envs/nsdata/bin/python manage.py runworker --only-channels=http.*

directory=/home/scott/repos/code/nsdata
numprocs=1
stdout_logfile=/var/log/daphne/daphneHttpWorker3.log
stderr_logfile=/var/log/daphne/daphneHttpWorker3.log
autostart=true
autorestart=true
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 6

killasgroup=true

priority=998


[program:daphneWebsocketWorker1]
; Set full path to celery program if using virtualenv
command=/anaconda3.5/envs/nsdata/bin/python manage.py runworker --only-channels=websocket.*

directory=/home/scott/repos/code/nsdata
numprocs=1
stdout_logfile=/var/log/daphne/daphneWebsocketWorker1.log
stderr_logfile=/var/log/daphne/daphneWebsocketWorker1.log
autostart=true
autorestart=true
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 6

killasgroup=true

priority=998


[program:daphneWebsocketWorker2]
; Set full path to celery program if using virtualenv
command=/anaconda3.5/envs/nsdata/bin/python manage.py runworker --only-channels=websocket.*

directory=/home/scott/repos/code/nsdata
numprocs=1
stdout_logfile=/var/log/daphne/daphneWebsocketWorker2.log
stderr_logfile=/var/log/daphne/daphneWebsocketWorker2.log
autostart=true
autorestart=true
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 6

killasgroup=true

priority=998


[program:daphneWebsocketWorker3]
; Set full path to celery program if using virtualenv
command=/anaconda3.5/envs/nsdata/bin/python manage.py runworker --only-channels=websocket.*

directory=/home/scott/repos/code/nsdata
numprocs=1
stdout_logfile=/var/log/daphne/daphneWebsocketWorker3.log
stderr_logfile=/var/log/daphne/daphneWebsocketWorker3.log
autostart=true
autorestart=true
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 6

killasgroup=true

priority=998


[program:celeryWorker1]
; Set full path to celery program if using virtualenv
command=/anaconda3.5/envs/nsdata/bin/celery -A nsdata worker -n cw1.%%h -l warn

directory=/home/scott/repos/code/nsdata
;user=celery
numprocs=1
stdout_logfile=/var/log/celery/celeryWorker1.log
stderr_logfile=/var/log/celery/celeryWorker1.log
autostart=true
autorestart=true
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 6

; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true

; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=998


[program:celerybeat]
; Set full path to celery program if using virtualenv
command=/anaconda3.5/envs/nsdata/bin/celery -A nsdata beat --loglevel=INFO

; remove the -A myapp argument if you are not using an app instance

directory=/home/scott/repos/code/nsdata
;user=celery
numprocs=1
stdout_logfile=/var/log/celery/beat.log
stderr_logfile=/var/log/celery/beat.log
autostart=true
autorestart=true
startsecs=10

; if rabbitmq is supervised, set its priority higher
; so it starts first
priority=999

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use unix:// schem for a unix sockets.


[include]

# Uncomment this line for celeryd for Python
;files=celeryd.conf

# Uncomment this line for celeryd for Django.
files=django/celeryd.conf
